쿠키
- a.com에서 받은 쿠키는 이후 a.com에 다시 요청할 때 브라우저가 자동으로 쿠키를 함께 보냄
- rest api에서는 크로스 오리진 요청이 가능함(a에서 b로 요청한다고 하면)
  브라우저는 보안상 기본적으로 쿠키를 자동으로 보내지 않음
  with Credential : 요청에 b에서 수신한 쿠키를 포함해서 전송해라

withCredentials: true
- 크로스 도메인 요청(cross-origin request) 시, 브라우저가 쿠키, 인증 정보(예: 세션 쿠키) 등을 요청에 포함하도록 지시하는 설정
- 민감한 정보가 포함된 요청이므로, 서버는 반드시 어떤 클라이언트가 요청했는지 명확히 알아야 한다
- 와일드 카드는 금지된다

options
- 클라이언트가 실제 요청을 보내기 전에 서버가 이 요청을 허용할지를 확인하기 위해 보내는 preflight request(사전 요청)
- 조건
  요청 메서드가 GET, POST, HEAD가 아닌 경우
  POST이지만 Content-Type이 urlencoded, form-data, text/plain이 아닌 경우

항목	                    설명	                                                  즉시 반영?	                                예시
상태 (useState, useStore)	컴포넌트 렌더에 영향을 주는 값. React가 추적함	        ❌ 비동기적으로 반영됨	        useState, zustand, useMemberStore(state => state.xxx)
사용자 입력 (이벤트 값)	    사용자가 입력한 값 등, 이벤트에서 직접 받은 값	        ✅ 즉시 사용 가능	            event.target.value, ref.current.value 등
상태 기반 분기처리	        반드시 useEffect 안에서 처리해야 안전	                                              -	if (isPasswordVerified) navigate(...)


1. **상태(state)**는 즉시 반영되지 않음
React는 상태를 변경하면:
  바로 렌더링을 하지 않고,
  변경 요청 → React가 다음 렌더에서 반영함
  즉, 변경 직후에는 이전 값일 수도 있음.

2. **사용자 입력(event 값 등)**은 즉시 사용 가능 -> 3. 상태 변경 후 반응할 작업은 useEffect 사용